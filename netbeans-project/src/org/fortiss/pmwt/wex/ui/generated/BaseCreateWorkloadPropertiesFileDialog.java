package org.fortiss.pmwt.wex.ui.generated;

import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.table.DefaultTableModel;

public class BaseCreateWorkloadPropertiesFileDialog extends javax.swing.JDialog
		implements ActionListener, ComponentListener, MouseListener {

	public BaseCreateWorkloadPropertiesFileDialog(JFrame frameOwner) {
		super(frameOwner);
		initComponents();
	}

	/**
	 * Creates new form BasePrepareInputDataPage1
	 */
	public BaseCreateWorkloadPropertiesFileDialog() {
		super();
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		btWorkloadType = new ButtonGroup();
		pnlGeneralInformation = new JPanel();
		lblSessionCount = new JLabel();
		txtSessionCount = new JTextField();
		lblEventCount = new JLabel();
		txtEventCount = new JTextField();
		btnAnalyze = new JButton();
		lblMinEventCountInSession = new JLabel();
		txtMinEventCountInSession = new JTextField();
		lblMaxEventCountInSession = new JLabel();
		txtMaxEventCountInSession = new JTextField();
		lblAverageSessionLength = new JLabel();
		txtAverageSessionLength = new JTextField();
		lblAverageSessionCount = new JLabel();
		txtAverageSessionCount = new JTextField();
		lblAverageArrivalRate = new JLabel();
		txtAverageArrivalRate = new JTextField();
		lblSessionCountPerTimeRange = new JLabel();
		spSessionCountPerTimeRange = new JScrollPane();
		tblSessionCountPerTimeRange = new JTable();
		pnlBottom = new JPanel();
		btnSave = new JButton();
		btnSaveAndClose = new JButton();
		pnlProperties = new JPanel();
		lblWorkloadType = new JLabel();
		txtWorkloadTypeValue = new JTextField();
		lblFormula1 = new JLabel();
		rbClosedWorkload = new JRadioButton();
		rbOpenWorkload = new JRadioButton();
		txtFormula = new JTextField();
		lblFormula = new JLabel();
		txtType = new JTextField();
		lblType = new JLabel();

		setTitle("Workload intensity properties");
		setBounds(new Rectangle(0, 0, 800, 600));
		setLocationByPlatform(true);
		setMinimumSize(new Dimension(800, 600));
		setName("wndCreateWorkloadPropertiesFile"); // NOI18N
		setResizable(false);
		setType(Type.UTILITY);
		addComponentListener(this);

		pnlGeneralInformation.setBorder(BorderFactory
				.createTitledBorder("General information"));

		lblSessionCount.setText("Session count:");
		lblSessionCount.setMaximumSize(new Dimension(200, 20));
		lblSessionCount.setMinimumSize(new Dimension(200, 20));
		lblSessionCount.setPreferredSize(new Dimension(200, 20));

		txtSessionCount.setEditable(false);
		txtSessionCount.setText("---");
		txtSessionCount.setMaximumSize(new Dimension(200, 30));
		txtSessionCount.setMinimumSize(new Dimension(200, 30));
		txtSessionCount.setPreferredSize(new Dimension(200, 30));

		lblEventCount.setText("Event count:");
		lblEventCount.setMaximumSize(new Dimension(200, 20));
		lblEventCount.setMinimumSize(new Dimension(200, 20));
		lblEventCount.setPreferredSize(new Dimension(200, 20));

		txtEventCount.setEditable(false);
		txtEventCount.setText("---");
		txtEventCount.setMaximumSize(new Dimension(200, 30));
		txtEventCount.setMinimumSize(new Dimension(200, 30));
		txtEventCount.setPreferredSize(new Dimension(200, 30));

		btnAnalyze.setText("Analyze");
		btnAnalyze.setMaximumSize(new Dimension(140, 30));
		btnAnalyze.setMinimumSize(new Dimension(140, 30));
		btnAnalyze.setPreferredSize(new Dimension(140, 30));
		btnAnalyze.addActionListener(this);

		lblMinEventCountInSession.setText("Minimal event count:");
		lblMinEventCountInSession.setMaximumSize(new Dimension(200, 20));
		lblMinEventCountInSession.setMinimumSize(new Dimension(200, 20));
		lblMinEventCountInSession.setPreferredSize(new Dimension(200, 20));

		txtMinEventCountInSession.setEditable(false);
		txtMinEventCountInSession.setText("---");
		txtMinEventCountInSession.setMaximumSize(new Dimension(200, 30));
		txtMinEventCountInSession.setMinimumSize(new Dimension(200, 30));
		txtMinEventCountInSession.setPreferredSize(new Dimension(200, 30));

		lblMaxEventCountInSession.setText("Maximal event count:");
		lblMaxEventCountInSession.setMaximumSize(new Dimension(200, 20));
		lblMaxEventCountInSession.setMinimumSize(new Dimension(200, 20));
		lblMaxEventCountInSession.setPreferredSize(new Dimension(200, 20));

		txtMaxEventCountInSession.setEditable(false);
		txtMaxEventCountInSession.setText("---");
		txtMaxEventCountInSession.setMaximumSize(new Dimension(200, 30));
		txtMaxEventCountInSession.setMinimumSize(new Dimension(200, 30));
		txtMaxEventCountInSession.setPreferredSize(new Dimension(200, 30));

		lblAverageSessionLength.setText("Average session length (events):");
		lblAverageSessionLength.setMaximumSize(new Dimension(200, 20));
		lblAverageSessionLength.setMinimumSize(new Dimension(200, 20));
		lblAverageSessionLength.setPreferredSize(new Dimension(200, 20));

		txtAverageSessionLength.setEditable(false);
		txtAverageSessionLength.setText("---");
		txtAverageSessionLength.setMaximumSize(new Dimension(200, 30));
		txtAverageSessionLength.setMinimumSize(new Dimension(200, 30));
		txtAverageSessionLength.setPreferredSize(new Dimension(200, 30));

		lblAverageSessionCount.setText("Average session count:");
		lblAverageSessionCount.setMaximumSize(new Dimension(200, 20));
		lblAverageSessionCount.setMinimumSize(new Dimension(200, 20));
		lblAverageSessionCount.setPreferredSize(new Dimension(200, 20));

		txtAverageSessionCount.setEditable(false);
		txtAverageSessionCount.setText("---");
		txtAverageSessionCount.setMaximumSize(new Dimension(200, 30));
		txtAverageSessionCount.setMinimumSize(new Dimension(200, 30));
		txtAverageSessionCount.setPreferredSize(new Dimension(200, 30));

		lblAverageArrivalRate.setText("Average arrival rate:");
		lblAverageArrivalRate.setMaximumSize(new Dimension(200, 20));
		lblAverageArrivalRate.setMinimumSize(new Dimension(200, 20));
		lblAverageArrivalRate.setPreferredSize(new Dimension(200, 20));

		txtAverageArrivalRate.setEditable(false);
		txtAverageArrivalRate.setText("---");
		txtAverageArrivalRate.setMaximumSize(new Dimension(200, 30));
		txtAverageArrivalRate.setMinimumSize(new Dimension(200, 30));
		txtAverageArrivalRate.setPreferredSize(new Dimension(200, 30));

		lblSessionCountPerTimeRange.setText("Session count per minute:");
		lblSessionCountPerTimeRange.setMaximumSize(new Dimension(200, 20));
		lblSessionCountPerTimeRange.setMinimumSize(new Dimension(200, 20));
		lblSessionCountPerTimeRange.setPreferredSize(new Dimension(200, 20));

		tblSessionCountPerTimeRange.setModel(new DefaultTableModel(
				new Object[][] {

				},
				new String[] { "Segment", "Active sessions", "Arrival rate" }) {
			Class[] types = new Class[] { String.class, String.class,
					Object.class };
			boolean[] canEdit = new boolean[] { false, false, false };

			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		tblSessionCountPerTimeRange.addMouseListener(this);
		spSessionCountPerTimeRange.setViewportView(tblSessionCountPerTimeRange);

		GroupLayout pnlGeneralInformationLayout = new GroupLayout(
				pnlGeneralInformation);
		pnlGeneralInformation.setLayout(pnlGeneralInformationLayout);
		pnlGeneralInformationLayout
				.setHorizontalGroup(pnlGeneralInformationLayout
						.createParallelGroup(GroupLayout.Alignment.LEADING)
						.addGroup(
								GroupLayout.Alignment.TRAILING,
								pnlGeneralInformationLayout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												pnlGeneralInformationLayout
														.createParallelGroup(
																GroupLayout.Alignment.TRAILING)
														.addGroup(
																pnlGeneralInformationLayout
																		.createSequentialGroup()
																		.addGap(0,
																				0,
																				Short.MAX_VALUE)
																		.addComponent(
																				btnAnalyze,
																				GroupLayout.PREFERRED_SIZE,
																				GroupLayout.DEFAULT_SIZE,
																				GroupLayout.PREFERRED_SIZE))
														.addComponent(
																spSessionCountPerTimeRange)
														.addGroup(
																pnlGeneralInformationLayout
																		.createSequentialGroup()
																		.addGroup(
																				pnlGeneralInformationLayout
																						.createParallelGroup(
																								GroupLayout.Alignment.TRAILING,
																								false)
																						.addComponent(
																								lblSessionCountPerTimeRange,
																								GroupLayout.DEFAULT_SIZE,
																								GroupLayout.DEFAULT_SIZE,
																								Short.MAX_VALUE)
																						.addComponent(
																								txtAverageSessionLength,
																								GroupLayout.DEFAULT_SIZE,
																								GroupLayout.DEFAULT_SIZE,
																								Short.MAX_VALUE)
																						.addComponent(
																								lblAverageSessionLength,
																								GroupLayout.DEFAULT_SIZE,
																								GroupLayout.DEFAULT_SIZE,
																								Short.MAX_VALUE)
																						.addComponent(
																								txtSessionCount,
																								GroupLayout.Alignment.LEADING,
																								GroupLayout.DEFAULT_SIZE,
																								GroupLayout.DEFAULT_SIZE,
																								Short.MAX_VALUE)
																						.addComponent(
																								lblSessionCount,
																								GroupLayout.Alignment.LEADING,
																								GroupLayout.DEFAULT_SIZE,
																								GroupLayout.DEFAULT_SIZE,
																								Short.MAX_VALUE))
																		.addPreferredGap(
																				LayoutStyle.ComponentPlacement.RELATED)
																		.addGroup(
																				pnlGeneralInformationLayout
																						.createParallelGroup(
																								GroupLayout.Alignment.LEADING)
																						.addComponent(
																								lblEventCount,
																								GroupLayout.DEFAULT_SIZE,
																								GroupLayout.DEFAULT_SIZE,
																								Short.MAX_VALUE)
																						.addComponent(
																								txtEventCount,
																								GroupLayout.DEFAULT_SIZE,
																								GroupLayout.DEFAULT_SIZE,
																								Short.MAX_VALUE)
																						.addComponent(
																								lblAverageSessionCount,
																								GroupLayout.DEFAULT_SIZE,
																								GroupLayout.DEFAULT_SIZE,
																								Short.MAX_VALUE)
																						.addComponent(
																								txtAverageSessionCount,
																								GroupLayout.DEFAULT_SIZE,
																								GroupLayout.DEFAULT_SIZE,
																								Short.MAX_VALUE))
																		.addPreferredGap(
																				LayoutStyle.ComponentPlacement.RELATED)
																		.addGroup(
																				pnlGeneralInformationLayout
																						.createParallelGroup(
																								GroupLayout.Alignment.LEADING)
																						.addComponent(
																								lblMinEventCountInSession,
																								GroupLayout.DEFAULT_SIZE,
																								GroupLayout.DEFAULT_SIZE,
																								Short.MAX_VALUE)
																						.addComponent(
																								txtMinEventCountInSession,
																								GroupLayout.DEFAULT_SIZE,
																								GroupLayout.DEFAULT_SIZE,
																								Short.MAX_VALUE)
																						.addComponent(
																								lblAverageArrivalRate,
																								GroupLayout.DEFAULT_SIZE,
																								GroupLayout.DEFAULT_SIZE,
																								Short.MAX_VALUE)
																						.addComponent(
																								txtAverageArrivalRate,
																								GroupLayout.DEFAULT_SIZE,
																								GroupLayout.DEFAULT_SIZE,
																								Short.MAX_VALUE))
																		.addPreferredGap(
																				LayoutStyle.ComponentPlacement.RELATED)
																		.addGroup(
																				pnlGeneralInformationLayout
																						.createParallelGroup(
																								GroupLayout.Alignment.LEADING)
																						.addComponent(
																								lblMaxEventCountInSession,
																								GroupLayout.DEFAULT_SIZE,
																								GroupLayout.DEFAULT_SIZE,
																								Short.MAX_VALUE)
																						.addComponent(
																								txtMaxEventCountInSession,
																								GroupLayout.DEFAULT_SIZE,
																								GroupLayout.DEFAULT_SIZE,
																								Short.MAX_VALUE))))
										.addContainerGap()));
		pnlGeneralInformationLayout
				.setVerticalGroup(pnlGeneralInformationLayout
						.createParallelGroup(GroupLayout.Alignment.LEADING)
						.addGroup(
								pnlGeneralInformationLayout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												pnlGeneralInformationLayout
														.createParallelGroup(
																GroupLayout.Alignment.BASELINE)
														.addComponent(
																lblSessionCount,
																GroupLayout.PREFERRED_SIZE,
																GroupLayout.DEFAULT_SIZE,
																GroupLayout.PREFERRED_SIZE)
														.addComponent(
																lblEventCount,
																GroupLayout.PREFERRED_SIZE,
																GroupLayout.DEFAULT_SIZE,
																GroupLayout.PREFERRED_SIZE)
														.addComponent(
																lblMinEventCountInSession,
																GroupLayout.PREFERRED_SIZE,
																GroupLayout.DEFAULT_SIZE,
																GroupLayout.PREFERRED_SIZE)
														.addComponent(
																lblMaxEventCountInSession,
																GroupLayout.PREFERRED_SIZE,
																GroupLayout.DEFAULT_SIZE,
																GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												pnlGeneralInformationLayout
														.createParallelGroup(
																GroupLayout.Alignment.BASELINE)
														.addComponent(
																txtSessionCount,
																GroupLayout.PREFERRED_SIZE,
																GroupLayout.DEFAULT_SIZE,
																GroupLayout.PREFERRED_SIZE)
														.addComponent(
																txtEventCount,
																GroupLayout.PREFERRED_SIZE,
																GroupLayout.DEFAULT_SIZE,
																GroupLayout.PREFERRED_SIZE)
														.addComponent(
																txtMinEventCountInSession,
																GroupLayout.PREFERRED_SIZE,
																GroupLayout.DEFAULT_SIZE,
																GroupLayout.PREFERRED_SIZE)
														.addComponent(
																txtMaxEventCountInSession,
																GroupLayout.PREFERRED_SIZE,
																GroupLayout.DEFAULT_SIZE,
																GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												pnlGeneralInformationLayout
														.createParallelGroup(
																GroupLayout.Alignment.BASELINE)
														.addComponent(
																lblAverageSessionLength,
																GroupLayout.PREFERRED_SIZE,
																GroupLayout.DEFAULT_SIZE,
																GroupLayout.PREFERRED_SIZE)
														.addComponent(
																lblAverageSessionCount,
																GroupLayout.PREFERRED_SIZE,
																GroupLayout.DEFAULT_SIZE,
																GroupLayout.PREFERRED_SIZE)
														.addComponent(
																lblAverageArrivalRate,
																GroupLayout.PREFERRED_SIZE,
																GroupLayout.DEFAULT_SIZE,
																GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												pnlGeneralInformationLayout
														.createParallelGroup(
																GroupLayout.Alignment.BASELINE)
														.addComponent(
																txtAverageSessionLength,
																GroupLayout.PREFERRED_SIZE,
																GroupLayout.DEFAULT_SIZE,
																GroupLayout.PREFERRED_SIZE)
														.addComponent(
																txtAverageSessionCount,
																GroupLayout.PREFERRED_SIZE,
																GroupLayout.DEFAULT_SIZE,
																GroupLayout.PREFERRED_SIZE)
														.addComponent(
																txtAverageArrivalRate,
																GroupLayout.PREFERRED_SIZE,
																GroupLayout.DEFAULT_SIZE,
																GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												lblSessionCountPerTimeRange,
												GroupLayout.PREFERRED_SIZE,
												GroupLayout.DEFAULT_SIZE,
												GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												spSessionCountPerTimeRange,
												GroupLayout.PREFERRED_SIZE,
												193, GroupLayout.PREFERRED_SIZE)
										.addGap(18, 18, 18)
										.addComponent(btnAnalyze,
												GroupLayout.PREFERRED_SIZE,
												GroupLayout.DEFAULT_SIZE,
												GroupLayout.PREFERRED_SIZE)
										.addContainerGap(
												GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)));

		btnSave.setText("Save");
		btnSave.setMaximumSize(new Dimension(140, 30));
		btnSave.setMinimumSize(new Dimension(140, 30));
		btnSave.setPreferredSize(new Dimension(140, 30));
		btnSave.addActionListener(this);

		btnSaveAndClose.setText("Save & Close");
		btnSaveAndClose.setMaximumSize(new Dimension(140, 30));
		btnSaveAndClose.setMinimumSize(new Dimension(140, 30));
		btnSaveAndClose.setPreferredSize(new Dimension(140, 30));
		btnSaveAndClose.addActionListener(this);

		GroupLayout pnlBottomLayout = new GroupLayout(pnlBottom);
		pnlBottom.setLayout(pnlBottomLayout);
		pnlBottomLayout.setHorizontalGroup(pnlBottomLayout.createParallelGroup(
				GroupLayout.Alignment.LEADING)
				.addGroup(
						GroupLayout.Alignment.TRAILING,
						pnlBottomLayout
								.createSequentialGroup()
								.addContainerGap(GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)
								.addComponent(btnSave,
										GroupLayout.PREFERRED_SIZE,
										GroupLayout.DEFAULT_SIZE,
										GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(btnSaveAndClose,
										GroupLayout.PREFERRED_SIZE,
										GroupLayout.DEFAULT_SIZE,
										GroupLayout.PREFERRED_SIZE)
								.addContainerGap()));
		pnlBottomLayout.setVerticalGroup(pnlBottomLayout.createParallelGroup(
				GroupLayout.Alignment.LEADING).addGroup(
				pnlBottomLayout
						.createSequentialGroup()
						.addContainerGap()
						.addGroup(
								pnlBottomLayout
										.createParallelGroup(
												GroupLayout.Alignment.BASELINE)
										.addComponent(btnSaveAndClose,
												GroupLayout.PREFERRED_SIZE,
												GroupLayout.DEFAULT_SIZE,
												GroupLayout.PREFERRED_SIZE)
										.addComponent(btnSave,
												GroupLayout.PREFERRED_SIZE,
												GroupLayout.DEFAULT_SIZE,
												GroupLayout.PREFERRED_SIZE))
						.addContainerGap(GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE)));

		pnlProperties.setBorder(BorderFactory.createTitledBorder("Properties"));

		lblWorkloadType.setText("Workload type:");
		lblWorkloadType.setMaximumSize(new Dimension(200, 20));
		lblWorkloadType.setMinimumSize(new Dimension(200, 20));
		lblWorkloadType.setPreferredSize(new Dimension(200, 20));

		txtWorkloadTypeValue.setText("1");
		txtWorkloadTypeValue.setMaximumSize(new Dimension(200, 30));
		txtWorkloadTypeValue.setMinimumSize(new Dimension(200, 30));
		txtWorkloadTypeValue.setPreferredSize(new Dimension(200, 30));

		lblFormula1.setText("Population/Arrival rate:");
		lblFormula1.setMaximumSize(new Dimension(200, 20));
		lblFormula1.setMinimumSize(new Dimension(200, 20));
		lblFormula1.setPreferredSize(new Dimension(200, 20));

		btWorkloadType.add(rbClosedWorkload);
		rbClosedWorkload.setSelected(true);
		rbClosedWorkload.setText("Closed workload");
		rbClosedWorkload.setMaximumSize(new Dimension(130, 30));
		rbClosedWorkload.setMinimumSize(new Dimension(130, 30));
		rbClosedWorkload.setPreferredSize(new Dimension(130, 30));
		rbClosedWorkload.addActionListener(this);

		btWorkloadType.add(rbOpenWorkload);
		rbOpenWorkload.setText("Open workload");
		rbOpenWorkload.setMaximumSize(new Dimension(130, 30));
		rbOpenWorkload.setMinimumSize(new Dimension(130, 30));
		rbOpenWorkload.setPreferredSize(new Dimension(130, 30));
		rbOpenWorkload.addActionListener(this);

		GroupLayout pnlPropertiesLayout = new GroupLayout(pnlProperties);
		pnlProperties.setLayout(pnlPropertiesLayout);
		pnlPropertiesLayout
				.setHorizontalGroup(pnlPropertiesLayout
						.createParallelGroup(GroupLayout.Alignment.LEADING)
						.addGroup(
								pnlPropertiesLayout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												pnlPropertiesLayout
														.createParallelGroup(
																GroupLayout.Alignment.LEADING)
														.addGroup(
																pnlPropertiesLayout
																		.createSequentialGroup()
																		.addComponent(
																				rbClosedWorkload,
																				GroupLayout.PREFERRED_SIZE,
																				132,
																				GroupLayout.PREFERRED_SIZE)
																		.addPreferredGap(
																				LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				rbOpenWorkload,
																				GroupLayout.PREFERRED_SIZE,
																				GroupLayout.DEFAULT_SIZE,
																				GroupLayout.PREFERRED_SIZE))
														.addComponent(
																lblWorkloadType,
																GroupLayout.PREFERRED_SIZE,
																200,
																GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												LayoutStyle.ComponentPlacement.UNRELATED)
										.addGroup(
												pnlPropertiesLayout
														.createParallelGroup(
																GroupLayout.Alignment.LEADING)
														.addComponent(
																lblFormula1,
																GroupLayout.PREFERRED_SIZE,
																GroupLayout.DEFAULT_SIZE,
																GroupLayout.PREFERRED_SIZE)
														.addComponent(
																txtWorkloadTypeValue,
																GroupLayout.PREFERRED_SIZE,
																GroupLayout.DEFAULT_SIZE,
																GroupLayout.PREFERRED_SIZE))
										.addContainerGap(
												GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)));
		pnlPropertiesLayout
				.setVerticalGroup(pnlPropertiesLayout
						.createParallelGroup(GroupLayout.Alignment.LEADING)
						.addGroup(
								pnlPropertiesLayout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												pnlPropertiesLayout
														.createParallelGroup(
																GroupLayout.Alignment.BASELINE)
														.addComponent(
																lblWorkloadType,
																GroupLayout.PREFERRED_SIZE,
																GroupLayout.DEFAULT_SIZE,
																GroupLayout.PREFERRED_SIZE)
														.addComponent(
																lblFormula1,
																GroupLayout.PREFERRED_SIZE,
																GroupLayout.DEFAULT_SIZE,
																GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												pnlPropertiesLayout
														.createParallelGroup(
																GroupLayout.Alignment.BASELINE)
														.addComponent(
																rbClosedWorkload,
																GroupLayout.PREFERRED_SIZE,
																GroupLayout.DEFAULT_SIZE,
																GroupLayout.PREFERRED_SIZE)
														.addComponent(
																rbOpenWorkload,
																GroupLayout.PREFERRED_SIZE,
																GroupLayout.DEFAULT_SIZE,
																GroupLayout.PREFERRED_SIZE)
														.addComponent(
																txtWorkloadTypeValue,
																GroupLayout.PREFERRED_SIZE,
																GroupLayout.DEFAULT_SIZE,
																GroupLayout.PREFERRED_SIZE))
										.addContainerGap(
												GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)));

		GroupLayout layout = new GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(
								layout.createParallelGroup(
										GroupLayout.Alignment.LEADING, false)
										.addComponent(pnlGeneralInformation,
												GroupLayout.DEFAULT_SIZE,
												GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)
										.addComponent(pnlBottom,
												GroupLayout.DEFAULT_SIZE,
												GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)
										.addComponent(pnlProperties,
												GroupLayout.DEFAULT_SIZE,
												GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE))
						.addContainerGap(GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(
				GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(pnlGeneralInformation,
										GroupLayout.PREFERRED_SIZE,
										GroupLayout.DEFAULT_SIZE,
										GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(pnlProperties,
										GroupLayout.PREFERRED_SIZE,
										GroupLayout.DEFAULT_SIZE,
										GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										LayoutStyle.ComponentPlacement.RELATED)
								.addPreferredGap(
										LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(pnlBottom,
										GroupLayout.PREFERRED_SIZE,
										GroupLayout.DEFAULT_SIZE,
										GroupLayout.PREFERRED_SIZE)
								.addContainerGap(GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)));

		pack();
	}

	// Code for dispatching events from components to event handlers.

	public void actionPerformed(ActionEvent evt) {
		if (evt.getSource() == btnAnalyze) {
			BaseCreateWorkloadPropertiesFileDialog.this
					.btnAnalyzeActionPerformed(evt);
		} else if (evt.getSource() == btnSave) {
			BaseCreateWorkloadPropertiesFileDialog.this
					.btnSaveActionPerformed(evt);
		} else if (evt.getSource() == btnSaveAndClose) {
			BaseCreateWorkloadPropertiesFileDialog.this
					.btnSaveAndCloseActionPerformed(evt);
		} else if (evt.getSource() == rbClosedWorkload) {
			BaseCreateWorkloadPropertiesFileDialog.this
					.rbClosedWorkloadActionPerformed(evt);
		} else if (evt.getSource() == rbOpenWorkload) {
			BaseCreateWorkloadPropertiesFileDialog.this
					.rbOpenWorkloadActionPerformed(evt);
		}
	}

	public void componentHidden(ComponentEvent evt) {
	}

	public void componentMoved(ComponentEvent evt) {
	}

	public void componentResized(ComponentEvent evt) {
	}

	public void componentShown(ComponentEvent evt) {
		if (evt.getSource() == BaseCreateWorkloadPropertiesFileDialog.this) {
			BaseCreateWorkloadPropertiesFileDialog.this.formComponentShown(evt);
		}
	}

	public void mouseClicked(MouseEvent evt) {
		if (evt.getSource() == tblSessionCountPerTimeRange) {
			BaseCreateWorkloadPropertiesFileDialog.this
					.tblSessionCountPerTimeRangeMouseClicked(evt);
		}
	}

	public void mouseEntered(MouseEvent evt) {
	}

	public void mouseExited(MouseEvent evt) {
	}

	public void mousePressed(MouseEvent evt) {
	}

	public void mouseReleased(MouseEvent evt) {
	}// </editor-fold>//GEN-END:initComponents

	protected void btnSaveAndCloseActionPerformed(ActionEvent evt) {// GEN-FIRST:event_btnSaveAndCloseActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_btnSaveAndCloseActionPerformed

	protected void formComponentShown(ComponentEvent evt) {// GEN-FIRST:event_formComponentShown
		// TODO add your handling code here:
	}// GEN-LAST:event_formComponentShown

	protected void btnSaveActionPerformed(ActionEvent evt) {// GEN-FIRST:event_btnSaveActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_btnSaveActionPerformed

	protected void btnAnalyzeActionPerformed(ActionEvent evt) {// GEN-FIRST:event_btnAnalyzeActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_btnAnalyzeActionPerformed

	protected void rbClosedWorkloadActionPerformed(ActionEvent evt) {// GEN-FIRST:event_rbClosedWorkloadActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_rbClosedWorkloadActionPerformed

	protected void rbOpenWorkloadActionPerformed(ActionEvent evt) {// GEN-FIRST:event_rbOpenWorkloadActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_rbOpenWorkloadActionPerformed

	protected void tblSessionCountPerTimeRangeMouseClicked(MouseEvent evt) {// GEN-FIRST:event_tblSessionCountPerTimeRangeMouseClicked
		// TODO add your handling code here:
	}// GEN-LAST:event_tblSessionCountPerTimeRangeMouseClicked

	// Variables declaration - do not modify//GEN-BEGIN:variables
	protected ButtonGroup btWorkloadType;
	protected JButton btnAnalyze;
	protected JButton btnSave;
	protected JButton btnSaveAndClose;
	protected JLabel lblAverageSessionCount;
	protected JLabel lblAverageSessionLength;
	protected JLabel lblAverageArrivalRate;
	protected JLabel lblEventCount;
	protected JLabel lblFormula;
	protected JLabel lblFormula1;
	protected JLabel lblMaxEventCountInSession;
	protected JLabel lblMinEventCountInSession;
	protected JLabel lblSessionCount;
	protected JLabel lblSessionCountPerTimeRange;
	protected JLabel lblType;
	protected JLabel lblWorkloadType;
	protected JPanel pnlBottom;
	protected JPanel pnlGeneralInformation;
	protected JPanel pnlProperties;
	protected JRadioButton rbClosedWorkload;
	protected JRadioButton rbOpenWorkload;
	protected JScrollPane spSessionCountPerTimeRange;
	protected JTable tblSessionCountPerTimeRange;
	protected JTextField txtAverageSessionCount;
	protected JTextField txtAverageSessionLength;
	protected JTextField txtAverageArrivalRate;
	protected JTextField txtEventCount;
	protected JTextField txtFormula;
	protected JTextField txtMaxEventCountInSession;
	protected JTextField txtMinEventCountInSession;
	protected JTextField txtSessionCount;
	protected JTextField txtType;
	protected JTextField txtWorkloadTypeValue;
	// End of variables declaration//GEN-END:variables
}
